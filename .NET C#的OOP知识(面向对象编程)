

OOP是我们非常熟悉的一种概念了，这里仅记录一些C#中比较特殊的用法和知识点

1.构造函数-链接构造函数调用
//完全懵逼，对于这个用法
class Point
{
int xCoord;
int yCoord;
            Point()
            : this(0, 0)
            {
            }
            Point(int xCoord, int yCoord) {
            this.xCoord = xCoord;
            this.yCoord = yCoord;
            }
} 

2.方法的签名signature
  实际就是区分是否同名重载的依据：参数和其类型



2.方法的重载（类似于C++中的函数重载）
  同名和同返回类型的条件下，如果参数个数或者类型不同，这就是方法的重载
  
 3.静态成员
 static 关键字修饰的成员
 静态数据成员和普通数据成员区别较大，体现在下面几点：（摘自C++的语法说明）
（1）静态数据成员属于整个类，即使没有任何对象创建，类的静态数据成员变量也存在
（2）类的静态数据成员应该在代码中被显式地初始化，一般要在类外进行
（3）外部访问类的静态成员能直接通过类名来访问，例如：test::getCount()
（4）类的静态成员函数无法直接访问普通数据成员（可以通过对象名间接的访问），而类的任何成员函数都可以访问类的静态数据成员。
（5）静态成员和类的普通成员一样，也具有public、protected、private3种访问级别，也可以具有返回值、const修饰符等参数。
  
  
  
  4.OOP的6大机制
 封装 多态 类 继承 对象 抽象
 
 
 5.区别封装修饰词
 
 public
private
protected
internal
protected internal
 
 
 6.类的继承，需要注意的点
    一个是类的级别，一个是类的继承与访问控制之间的关系，还有一个是继承后如何使用接口多重实现继承下来的方法
    （这里要提醒自己，接口之间也存在派生继承的关系，关键字使用extend）
     (继承，使抽象化编程更加轻松)
    
    
 7.继承的实现
 
 语法：
 
 //声明方法
 class DerivedClass : BaseClass
 
 //用base使用父类的构造函数 
public Circle(int x, int y)
: base(x, y)
{
}



8.在继承当中，父类的私有成员仍然是子类无法访问的

9.C#中没有多重继承

10.C#中的父类的构造函数不会被继承下来，所以子类自己要学会定义，学会照顾好自己

11.与父类含有同名或者同样的方法签名的成员，会覆盖掉父类的成员

12.了解UML类图管理  https://www.cnblogs.com/atom-wangzh/p/8617836.html





13.看到这以为面向对象编程结束了吗？不，只是刚刚讲完了类的继承而已，接下来的内容有：

                              1. Polymorphism 多态
                              2. Abstract Classes 抽象类
                              3. Abstract Methods 抽象方法
                              4. Override Methods 覆盖方法与虚函数
                              
14.那么以上四点是息息相关的。多态的实现，实际上就是依靠子类方法对父类方法的覆盖原理。多态的好处是什么呢？
那就是，多态可以让一个集合当中混合存放不同的对象类型，只要你记得用他们的父类构造函数去初始化就好啦

abstract class Animal {}
class Deer : Animal {}
class Elephant : Animal {}

 Animal babyDeer = new Deer();
Animal babyElephant = new Elephant();
 
 抽象类不一定含有抽象方法，但可以确定，抽象类不可以被实例化。那么抽象类用来干嘛的？抽象类，实际上就是起到一个基础类的作用，是用来被派生的。
 
  public abstract class GraphicObject
{
abstract void Draw();
}

来来来，谈到了抽象类是用来被派生的基本类，抽象方法是可以用来被覆盖的，那么怎么覆盖呢？
答案就是，让抽象方法用virtual关键字声明，这样抽象方法才是一个可以被覆盖的虚函数。

但是虚函数有个规定，那就是想要覆盖虚函数，必须保证方法的参数列表与虚函数被声明时一模一样！
并且注意一下，一个新生的覆盖方法，他的访问等级一定要大于等于被覆盖的函数，否则编译会出错，并且也与OOP的精神相违背。





  
  
  
  
  
  
